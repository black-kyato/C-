1. 实现一个队列的类模板

     

2. 实现一个模板形式的单例类，要求对于任意类型的类经过Singleton的处理之后，

  　都能获取一个单例对象，并且可以传递任意参数

     

     class Point;

     class Computer;

     

     Point pt(1, 2);

     Point pt2(3, 4);

     

     Computer com("Mac", 8888);

     

     

     int main(void)

     {

        Computer * p1 = Singleton<Computer>::getInstance("Xiaomi", 6666);

        Computer * p2 = Singleton<Computer>::getInstance("Xiaomi", 6666);

        

        Point　* p3 = Singleton<Point>::getInstance(1, 2);

        Point　* p4 = Singleton<Point>::getInstance(1, 2);

        

        return 0;

     } 

     

3. 实现log4cpp的封装，使其可以像printf一样使用，测试用例如下:

	

	void test() {

		int number = 100;

		const char * pstr = "hello, log4cpp";

		LogInfo("this is an info message. number = %d, str = %s\n", number, pstr);

	}

	

	

4. STL是由哪些组件构成的？它们各自具备什么样的特点？
1)容器:是容纳、包含一组元素或元素集合的对象,属于数据结构
2)适配器:提供全新的接口,对基本容器,迭代器,函数进行扩展或者修改,约束
3)迭代器:类似指针,提供在容器上进行遍历和访问的一组公共接口
4)算法:对容器中的元素进行排序,修改,搜索使用,进行各种操作
5)函数对象:一个行为类似函数的对象，它可以没有参数，也可以带有若干参数。
6)配置器:负责空间配置与管理。从实现的角度来看，配置器是一个实现了动态空间配置、空间管理、空间释放的class template。



5. 序列式容器都有哪些异同？
相同:都是顺序容器,支持各种顺序容器的操作,支持动态自动增减大小
不同:
vector:
连续存储结构，每个元素在内存上是连续的； 
支持高效的随机访问和在尾端插入/删除操作，但其他位置的插入/删除操作效率低下； 
相当于一个数组，但是与数组的区别为：内存空间的扩展
deque：
连续存储结构，即其每个元素在内存上也是连续的，类似于vector， 
不同之处在于，deque提供了两级数组结构， 第一级完全类似于vector，代表实际容器；另一级维护容器的首位地址。 
这样，deque除了具有vector的所有功能外，还支持高效的首/尾端插入/删除操作。 
list:
非连续存储结构，具有双链表结构，每个元素维护一对前向和后向指针，因此支持前向/后向遍历。 
支持高效的随机插入/删除操作，但随机访问效率低下，且由于需要额外维护指针，开销也比较大。 
每一个结点都包括一个信息快Info、一个前驱指针Pre、一个后驱指针Post。 
可以不分配必须的内存大小方便的进行添加和删除操作。 
使用的是非连续的内存空间进行存储。 

总结:
1)需要高效的随即存取，而不在乎插入和删除的效率，使用vector 
2)需要大量的插入和删除，而不关心随机存取，则应使用list 
3)需要随机存取，而且关心两端数据的插入和删除，则应使用deque
